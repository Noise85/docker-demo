services:
  env-check:
    image: eneabette/env-test:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
    networks:
      - internal

  reverse-proxy:
    image: httpd:latest
    ports:
      - "80:80"
      - "443:443"   # External access via HTTP redirects to HTTPS
    volumes:
      - ./apache2/conf/httpd.conf:/usr/local/apache2/conf/httpd.conf:ro
      - ./apache2/conf/extra/reverse-proxy.conf:/usr/local/apache2/conf/extra/reverse-proxy.conf:ro
      - ./apache2/conf/extra/httpd-mod-ssl.conf:/usr/local/apache2/conf/extra/httpd-mod-ssl.conf:ro
      - ./apache2/conf/ssl:/usr/local/apache2/conf/ssl:ro
    depends_on:
      - env-check
      - todo-app
    networks:
      - internal

  todo-app:
    image: eneabette/todo-app:latest
    container_name: todo-app
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
    depends_on:
      - env-check
      - postgresql
    networks:
      - internal
    # No published ports – accessible only via Docker networking

  postgresql:
    image: postgres:latest
    container_name: ${DB_HOST}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres/sql/ddl.sql:/docker-entrypoint-initdb.d/ddl.sql:ro
      - ./postgres/sql/import.sql:/docker-entrypoint-initdb.d/import.sql:ro
    networks:
      - internal
    depends_on:
      - env-check
    # No published ports – accessible only within the network

networks:
  internal:
    driver: bridge

volumes:
    pgdata: